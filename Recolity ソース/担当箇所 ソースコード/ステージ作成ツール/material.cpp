//=============================================================================
//
// 絵素材処理 [material.cpp]
// Author : 
//
//=============================================================================
#include "main.h"
#include "material.h"
#include "Texture.h"
#include <fstream>
#include <iostream>
#include <iomanip>
#include <sstream>
//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************


//*****************************************************************************
// グローバル変数
//*****************************************************************************
Image_Material g_Image_Material;

//=============================================================================
// 初期化処理
//=============================================================================
void LoadMaterial(void)
{
	//画像の読み込み
	const char* MapFilePath = "data/LoadTEXTURE.txt";  // 保存先ファイルパス
	std::string Loadtex[8] = {"","" ,"" ,"" ,"" ,"" ,"" ,"" };  // 保存先ファイルパス
	std::ifstream ifs(MapFilePath);
	if (ifs.is_open())
	{

		for (int i = 0; i < 8; i++)
		{
			std::string text;
			ifs >> text;
			if (text != "")
			{
				Loadtex[i] = "data/TEXTUER/";
				Loadtex[i] += text.c_str();
			}
		}
		ifs.close();
	}
	for (int  i = 0; i < 8; i++)
	{
		if (Loadtex[i] != "")
		{
			g_Image_Material.Floor_Image[i] = LoadTexture((char*)Loadtex[i].c_str());
		}
	}

}

//=============================================================================
// 終了処理
//=============================================================================
void ReleaseMaterial(void)
{

}


//=============================================================================
// イメージ構造体のゲッター
//=============================================================================
Image_Material& RefImageMaterial(void)
{
	return g_Image_Material;
}