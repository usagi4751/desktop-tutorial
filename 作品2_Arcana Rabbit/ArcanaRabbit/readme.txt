サーバ側readmee
起動後操作
カメラ移動
wasd移動
Lctrlで降下
ｓｐａｃｅで上昇
7キーでエネミースポーン
escで終了

サーバー起動時に自動でサーバーが解放されます


//=============================
・アピールポイント
//=============================
UDP通信を使ったマルチプレイ
UDPなのでパケロスを対策で前回、前々回のコマンドを送ってる
ゲームのプレイ中にステージの修正ができることや
文字表示

文字入力
数字のみ、英数字のみ、２バイト文字対応入力の３種類の設定がある


視線を使った当たり判定

深度設定ができる画像表示











ソースコード
manager.cppでTestUdpSceneを41行目で呼んでて
このシーンがメインループになります
他のシーンはクライアントからコピーしたときの残骸です

======================================================================================
クライアント側

各プロジェクトフォルダーの内容

.h インクルード
Bullet 発射物
draw2d ２D描画だけのすべて
entity エネミーだったりプレイヤー
Game アイテムとスキル辞書　
Input 入力系
Particle パーティクル　エミッターも入ってる
Player プレイヤーとインベントリこれらはいずれサーバー側になる予定
scene ゲームのシーン
font D2D1文字表示
textuer ゲームのテクスチャをすべて読み込んでる重くなったら改善予定
UDP DUP通信系

ソースファイル および ヘッダーファイル
{
main 
rendere
camera 
授業データ
メッシュフィールド
シャドウボリューム
モデル描画系 obj fbx
}


//==========
//アイテム& スキル
//==========
の基底クラスを継承したアイテムたちをシングルトンで作った後辞書に登録する
DictionaryItem.hのInitを見るとわかる
１種類しかないがスキルも同じようになってる
DictionarySkill.h , .cpp


//==========
//floor.h 
//==========
床判定にソロのとき使っていた


//==========
//draw2D_Manager
//==========
draw2D_Manager
2D描画すべてを担当してる
暇だったら１番作り直したい場所
Unityをイメージしてつくってみた
1つのヘッダーを呼ぶだけで文字表示とが画像表示ができる
エラーが出て止まりにくくなってる
まず始めに1度だけ
Lickを呼びその中にDraw2D_Manager::Add～～の当てはまるのを入れる
あとは色だったリを決める
setActiveでfalseになると表示されなくなるが
中身のデータはfalseでも変えられる

サンプルコード
	UI_Tex m_UI_Tex;


	m_UI_Tex.Link(Draw2D_Manager::AddUI());
	m_UI_Tex.SetColer({ 0.3f,0.3f,0.3f,0.5f });
	m_UI_Tex.SetTex(GetImage().m_fade);
	m_UI_Tex.SetDepth(2.0f);


と呼ぶだけでActiveならDrawがいらないからめっちゃいいと思ったが
解放だったり生成が面倒すぎて逆に使いにくくなった
あとシーンをまたぐときにクリアしたくないものとしたいものを分けるのが大変すぎるゴミ



//==========
//Input.h
//==========

キー入力とマウスの取得
TextBox UDPのチャット専用の入力
TextForm フォームをクリックすると文字が入力できる
Buttun マウスが上にあるか判定するだけ

//==========
//inventory
//==========

プレイヤーはインベントリがないと生きていけない
パラメーターの計算をインベントリ頼りで作っている
今後この機能はサーバー側に持ってく今回は週プレに間に合わなくなるので断念




